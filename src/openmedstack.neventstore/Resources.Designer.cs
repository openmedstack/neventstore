//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenMedStack.NEventStore {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static System.Resources.ResourceManager resourceMan;
        
        private static System.Globalization.CultureInfo resourceCulture;
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.Equals(null, resourceMan)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("OpenMedStack.NEventStore.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static string ReadOnlyCollection {
            get {
                return ResourceManager.GetString("ReadOnlyCollection", resourceCulture);
            }
        }
        
        internal static string AlreadyDisposed {
            get {
                return ResourceManager.GetString("AlreadyDisposed", resourceCulture);
            }
        }
        
        internal static string NonPositiveSequenceNumber {
            get {
                return ResourceManager.GetString("NonPositiveSequenceNumber", resourceCulture);
            }
        }
        
        internal static string NonPositiveRevisionNumber {
            get {
                return ResourceManager.GetString("NonPositiveRevisionNumber", resourceCulture);
            }
        }
        
        internal static string RevisionTooSmall {
            get {
                return ResourceManager.GetString("RevisionTooSmall", resourceCulture);
            }
        }
        
        internal static string InitializingPersistence {
            get {
                return ResourceManager.GetString("InitializingPersistence", resourceCulture);
            }
        }
        
        internal static string DisposingEngine {
            get {
                return ResourceManager.GetString("DisposingEngine", resourceCulture);
            }
        }
        
        internal static string InitializingEngine {
            get {
                return ResourceManager.GetString("InitializingEngine", resourceCulture);
            }
        }
        
        internal static string GettingAllCommitsFromRevision {
            get {
                return ResourceManager.GetString("GettingAllCommitsFromRevision", resourceCulture);
            }
        }
        
        internal static string GettingAllCommitsFromTime {
            get {
                return ResourceManager.GetString("GettingAllCommitsFromTime", resourceCulture);
            }
        }
        
        internal static string GettingAllCommitsFromToTime {
            get {
                return ResourceManager.GetString("GettingAllCommitsFromToTime", resourceCulture);
            }
        }
        
        internal static string AttemptingToCommit {
            get {
                return ResourceManager.GetString("AttemptingToCommit", resourceCulture);
            }
        }
        
        internal static string UpdatingStreamHead {
            get {
                return ResourceManager.GetString("UpdatingStreamHead", resourceCulture);
            }
        }
        
        internal static string GettingStreamsToSnapshot {
            get {
                return ResourceManager.GetString("GettingStreamsToSnapshot", resourceCulture);
            }
        }
        
        internal static string GettingSnapshotForStream {
            get {
                return ResourceManager.GetString("GettingSnapshotForStream", resourceCulture);
            }
        }
        
        internal static string AddingSnapshot {
            get {
                return ResourceManager.GetString("AddingSnapshot", resourceCulture);
            }
        }
        
        internal static string PurgingStore {
            get {
                return ResourceManager.GetString("PurgingStore", resourceCulture);
            }
        }
        
        internal static string TrackingStreams {
            get {
                return ResourceManager.GetString("TrackingStreams", resourceCulture);
            }
        }
        
        internal static string OptimisticConcurrencyCheck {
            get {
                return ResourceManager.GetString("OptimisticConcurrencyCheck", resourceCulture);
            }
        }
        
        internal static string NoConflicts {
            get {
                return ResourceManager.GetString("NoConflicts", resourceCulture);
            }
        }
        
        internal static string TrackingCommit {
            get {
                return ResourceManager.GetString("TrackingCommit", resourceCulture);
            }
        }
        
        internal static string NoLongerTrackingStream {
            get {
                return ResourceManager.GetString("NoLongerTrackingStream", resourceCulture);
            }
        }
        
        internal static string CreatingStream {
            get {
                return ResourceManager.GetString("CreatingStream", resourceCulture);
            }
        }
        
        internal static string OpeningStreamAtRevision {
            get {
                return ResourceManager.GetString("OpeningStreamAtRevision", resourceCulture);
            }
        }
        
        internal static string OpeningStreamWithSnapshot {
            get {
                return ResourceManager.GetString("OpeningStreamWithSnapshot", resourceCulture);
            }
        }
        
        internal static string PipelineHookSkippedCommit {
            get {
                return ResourceManager.GetString("PipelineHookSkippedCommit", resourceCulture);
            }
        }
        
        internal static string PipelineHookFilteredCommit {
            get {
                return ResourceManager.GetString("PipelineHookFilteredCommit", resourceCulture);
            }
        }
        
        internal static string InvokingPreCommitHooks {
            get {
                return ResourceManager.GetString("InvokingPreCommitHooks", resourceCulture);
            }
        }
        
        internal static string CommitRejectedByPipelineHook {
            get {
                return ResourceManager.GetString("CommitRejectedByPipelineHook", resourceCulture);
            }
        }
        
        internal static string CommittingAttempt {
            get {
                return ResourceManager.GetString("CommittingAttempt", resourceCulture);
            }
        }
        
        internal static string InvokingPostCommitPipelineHooks {
            get {
                return ResourceManager.GetString("InvokingPostCommitPipelineHooks", resourceCulture);
            }
        }
        
        internal static string ShuttingDownStore {
            get {
                return ResourceManager.GetString("ShuttingDownStore", resourceCulture);
            }
        }
        
        internal static string ConvertingEvent {
            get {
                return ResourceManager.GetString("ConvertingEvent", resourceCulture);
            }
        }
        
        internal static string GettingAllCommitsFromCheckpoint {
            get {
                return ResourceManager.GetString("GettingAllCommitsFromCheckpoint", resourceCulture);
            }
        }
        
        internal static string GettingAllCommitsFromBucketAndCheckpoint {
            get {
                return ResourceManager.GetString("GettingAllCommitsFromBucketAndCheckpoint", resourceCulture);
            }
        }
        
        internal static string DeletingStream {
            get {
                return ResourceManager.GetString("DeletingStream", resourceCulture);
            }
        }
        
        internal static string WireupHookIntoPipeline {
            get {
                return ResourceManager.GetString("WireupHookIntoPipeline", resourceCulture);
            }
        }
        
        internal static string WireupSetPersistenceEngine {
            get {
                return ResourceManager.GetString("WireupSetPersistenceEngine", resourceCulture);
            }
        }
        
        internal static string WireupSetSerializer {
            get {
                return ResourceManager.GetString("WireupSetSerializer", resourceCulture);
            }
        }
    }
}
